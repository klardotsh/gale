% Option
	"T" enum-generic

	"Some" "T" enum-generic-member
	"None" enum-member
;

? from-bool!
	consumes a Boolean and a fallback value off the stack and returns an Option
	member: Some(T) containing the fallback value if the boolean was truthy, or
	else None.
;
: from-bool! ( _ Boolean.True -> _ ) swap drop Option.Some ;
: from-bool! ( _ Boolean.False -> _ ) drop drop Option.None ;

: is-none? ( Option.Some -> Option.Some Boolean ) false ;
: is-none? ( Option.None -> Option.None Boolean ) true ;

: is-some? ( Option.Some -> Option.Some Boolean.True ) true ;
: is-some? ( Option.None -> Option.None Boolean.False ) false ;

? or
	reads an Option and a fallback value off the stack and returns it plus
	either the Option.Some member, if existent, or else the fallback value.
;
: or ( _ Option.Some -> _ ) swap drop enum-member-extract ;
: or ( _ Option.None -> _ ) swap ;

? or!
	consumes an Option and a fallback value off the stack and returns either
	the Option.Some member, if existent, or else the fallback value.
	;
: or! ( _ Option.Some -> _ ) swap drop enum-member-extract! ;
: or! ( _ Option.None -> _ ) drop ;

: must! ( _ Option.Some -> _ ) enum-member-extract! Result.Ok ;
: must! ( _ Option.None -> _ ) drop Result.Err ;

# TODO: docs: takes when_none when_some Option
: must_not! ( _ _ Option.Some -> _ ) drop swap drop Result.Err ;
: must_not! ( _ _ Option.None -> _ ) drop drop Result.Ok ;
