<string> String =>
	<= Equatable
	<= Printable
	<= DebugPrintable

eq { a(String) b(String) } Boolean !-> return a == b

repr { self(String) } -> self

repr_debug { self(String) } String !-> return string.format("\"%s\"", self)

format { it(!String) args(!...Any 0) } String ->
	!params_expected = _num_format_params it
	!result_from_bool
		eq params_expected args.len
		Error <=>
			message = "incorrect number of format arguments provided"

	format_unsafe it args

format_unsafe { it(String) args(...Any 0) } String !-> return string.format(it, args)

_num_format_params { it } -> _num_format_params_inner it |> Result.Ok!

-- TODO: pure gluumy implementation once we have an :iter module
_num_format_params_inner { it(String) } Number !->
	-- TODO: implement...
	return 0
