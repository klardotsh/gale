: mangle
	( String #1! -> String #2! )
	{{
		Returns a new String object based on the original, destroying the
	   	original in the process.
	}}
	"bar" /append
	,drop
;

: main "foo" mangle println ;

{ Now let's explore all the ways we can make the checker angry! }

: mangle-oops1
	( String -> String )
	"bar" /append ,drop ;
	{             ^ Not allowed! #1 is always implied unless overridden, and so
	                we are obligated to leave the same string object on the stack.
					String/append is ( String #1! <- String #2! ) (non-destructive),
					drop is ( @1 -> ) }

: mangle-oops2
	( String #1! <- String #2! )
	dup ;
	{   ^ Not allowed! While we made a second String on the stack, it's the
	      same string we already had and this is known by signature, because
		  dup is ( @1 <- @1 ), implying #1 for both generics. }
