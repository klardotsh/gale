?: output_result
	Consume a #?[ % Result Printable Printable ] , printing the inner contents
	to stdout (in the event of success) or stderr (in the event of an error).
;
: output_result ( Result.Ok -> ) enum-member-extract! repr println ;
: output_result ( Result.Err -> ) enum-member-extract! repr eprintln ;

?: maybe_something
	Randomly generate either Option.Some("body once told me") or None. How
	silly, right? The world's gonna roll me...
;
: maybe_something
	"body once told me"
	random(Boolean)
	into(Option)
;

?: get_ten_somes
	A silly statistics-defying method that tries to build an array of 10
	Some("body once told me") values randomly. It will almost certainly return
	an error, but on the off chance that RNGesus smiles upon you, it may return
	an ok. Regardless, it makes for a nice silly example of the Result and
	Option types in one swing.
;
: get_ten_somes
	"as expected, at least one None found" # String for Result.Err
	"against all odds, the array is all Somes" # String for Result.Ok
	'maybe_something 10 with_capacity_filled(Vec)
	'is_none find
;

: main get_ten_somes output_result ;
